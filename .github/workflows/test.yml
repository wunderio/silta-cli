name: Build silta cli binary and attach to test release

on:
  push:
    branches: [ feature/* ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  tests-matrix:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      - name: Run tests
        run: go test -v ./tests
  releases-matrix:
    name: Cross compile and release Go Binaries
    runs-on: ubuntu-latest
    needs: tests-matrix
    strategy:
      matrix:
        # Release unsigned darwin binaries
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v2
      - name: Set output
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - uses: wangyoucao577/go-release-action@v1.24
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          release_tag: test
          overwrite: true
          goversion: "https://go.dev/dl/go1.17.6.linux-amd64.tar.gz"
          binary_name: "silta"
          ldflags: "-X github.com/wunderio/silta-cli/internal/common.Version=${{ steps.vars.outputs.sha_short }}"
  circleci-build-drupal-project-k8s:
    runs-on: ubuntu-latest
    steps:
      - name: Validate cli with drupal-project-k8s
        run: |
          CIRCLECI_DEV_API_TOKEN="${{ secrets.CIRCLECI_DEV_API_TOKEN }}"
          REPO_NAME="drupal-project-k8s"
          JOB_COUNT=2

          base_api_url="https://circleci.com/api/v1.1/project/github/wunderio/${REPO_NAME}"
          # Trigger a new deployment.
          curl -s -X POST $base_api_url/build?circle-token=${CIRCLECI_DEV_API_TOKEN}
          sleep 10
          # Wait for deployment to be complete
          while curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'any(.[]; (.status == "running") or (.status == "queued"))' > /dev/null
          do
            echo "still running"
            sleep 10
          done
          # Test that the build was successful
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq '.[] | { job_name: .workflows.job_name, status: .status }'
          curl -s "$base_api_url?circle-token=${CIRCLECI_DEV_API_TOKEN}&limit=${JOB_COUNT}" | jq -e 'all(.[]; .status == "success")' > /dev/null
